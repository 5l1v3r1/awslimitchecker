
.. -- WARNING -- WARNING -- WARNING
   This document is automatically generated by
   awslimitchecker/docs/build_generated_docs.py.
   Please edit that script, or the template it points to.

.. _cli_usage:

Command Line Usage
===================

awslimitchecker ships with a command line script for use outside of
Python environments. ``awslimitchecker`` is installed as a
`setuptools entry point <https://pythonhosted.org/setuptools/setuptools.html#automatic-script-creation>`_,
and will be available wherever you install the package (if you install
in a virtual environment as recommended, it will be in the venv's ``bin/`` directory).

The command line script provides simple access to the most common features,
though not full access to all configuration possibilities. In addition, when checking
usage, the script will exit 0 of everything is OK, 1 if there are warnings, and 2 if there
are critical thresholds exceeded (though the output is not currently suitable for direct
use as a Nagios-compatible plugin).

Examples
---------

In the following examples, **output has been truncated** to simplify documentation.
When running with all services enabled, ``awslimitchecker`` will provide *many* lines
of output. ``(...)`` has been inserted in the output below to denote removed
or truncated lines.

Listing Supported Services
+++++++++++++++++++++++++++

View the AWS services currently supported by ``awslimitchecker`` with the
``-s`` or ``--list-services`` option.

.. code-block:: console

   (venv)$ awslimitchecker -s
   EC2



Viewing Limits
+++++++++++++++

View the limits that ``awslimitchecker`` currently knows how to check, and what
the limit value is set as (if you specify limit overrides, they will be used
instead of the default limit) by specifying the ``-l`` or ``--list-defaults``
option.

.. code-block:: console

   (venv)$ awslimitchecker -l
   EC2/EC2-Classic Elastic IPs	5
   EC2/EC2-VPC Elastic IPs	5
   EC2/General Purpose (SSD) volume storage (TiB)	20
   EC2/Magnetic volume storage (TiB)	20
   EC2/Provisioned IOPS	40000
   (...)
   EC2/Running On-Demand t2.micro instances	20
   EC2/Running On-Demand t2.small instances	20
   EC2/Security groups per VPC	100
   EC2/VPC security groups per elastic network interface	5



Checking Usage
+++++++++++++++

The ``-u`` or ``--show-usage`` options to ``awslimitchecker`` show the current
usage for each limit that ``awslimitchecker`` knows about. It will connect to the
AWS API and determine the current usage for each limit. In cases where limits are
per-resource instead of account-wide (i.e. "Rules per VPC security group" or
"Security groups per VPC"), the usage will be reported for each possible resource
in ``id=value`` format (i.e. for each VPC security group and each VPC, respectively,
using their IDs).

.. code-block:: console

   (venv)$ awslimitchecker -u
   EC2/EC2-Classic Elastic IPs	5
   EC2/EC2-VPC Elastic IPs	0
   EC2/General Purpose (SSD) volume storage (TiB)	4.501
   EC2/Magnetic volume storage (TiB)	23.417
   EC2/Provisioned IOPS	5600
   (...)
   EC2/Running On-Demand t2.micro instances	5
   EC2/Running On-Demand t2.small instances	4
   EC2/Security groups per VPC	max: vpc-c300b9a6=96 (vpc-a926c2cc=22, vpc-73ec9716=24, vpc-1ee8937b=28, (...)
   EC2/VPC security groups per elastic network interface	max: eni-8cd846a6=2 (eni-46e63869=1, eni-1b2ee (...)



Overriding Limits
++++++++++++++++++

In cases where you've been given a limit increase by AWS Support, you can override
the default limits with custom ones. Currently, to do this from the command line,
you must specify each limit that you want to override separately (the
:py:meth:`~.AwsLimitChecker.set_limit_overrides` Python method accepts a dict for
easy bulk overrides of limits) using the ``-L`` or ``--limit`` options. Limits are
specified in a ``service_name/limit_name=value`` format, and must be quoted if the
limit name contains spaces.

For example, to override the limits of EC2's "EC2-Classic Elastic IPs" and
"EC2-VPC Elastic IPs" from their defaults of 5, to 10 and 20, respestively:

.. code-block:: console

   (venv)$ awslimitchecker -L "EC2/EC2-Classic Elastic IPs"=100 --limit="EC2/EC2-VPC Elastic IPs"=200 --list-defaults
   EC2/EC2-Classic Elastic IPs	100
   EC2/EC2-VPC Elastic IPs	200
   EC2/General Purpose (SSD) volume storage (TiB)	20
   EC2/Magnetic volume storage (TiB)	20
   EC2/Provisioned IOPS	40000
   (...)
   EC2/Running On-Demand t2.micro instances	20
   EC2/Running On-Demand t2.small instances	20
   EC2/Security groups per VPC	100
   EC2/VPC security groups per elastic network interface	5



This example simply sets the overrides, and then prints the limits for confirmation.

Check Limits Against Thresholds
++++++++++++++++++++++++++++++++

The default mode of operation for ``awslimitchecker`` (when no other action-specific
options are specified) is to check the usage of all known limits, compare them against
the configured limit values (overrides if specified, otherwise hard-coded defaults),
and then output a message and set an exit code depending on thresholds.

Currently, the ``awslimitchecker`` command line script only supports global warning and
critical thresholds, which default to 80% and 99% respectively. If any limit's usage is
greater than or equal to 80% of its limit value, this will be included in the output
and the program will exit with return code 1. If any limit's usage is greater than or
equal to 99%, it will include that in the output and exit 2. When determining exit codes,
critical takes priority over warning. The output will include the specifics of which limits
exceeded the threshold, and for limits that are per-resource, the resource IDs.

The Python class allows setting thresholds per-limit as either a percentage, or an integer
usage value, or both; this functionality is not currently present in the command line wrapper.

To check all limits against their thresholds (in this example, one limit has crossed the warning
threshold only, and another has crossed the critical threshold):

.. code-block:: console

   (venv)$ awslimitchecker
   EC2/EC2-Classic Elastic IPs (limit 5) CRITICAL: 5
   EC2/Magnetic volume storage (TiB) (limit 20) CRITICAL: 23.417
   EC2/Running On-Demand EC2 instances (limit 20) CRITICAL: 97
   EC2/Running On-Demand m3.medium instances (limit 20) CRITICAL: 53
   EC2/Security groups per VPC (limit 100) WARNING: vpc-c300b9a6=96



Set Custom Thresholds
++++++++++++++++++++++

To set the warning threshold of 50% and a critical threshold of 75% when checking limits:

.. code-block:: console

   (venv)$ awslimitchecker -W 97 --critical=98
   EC2/EC2-Classic Elastic IPs (limit 5) CRITICAL: 5
   EC2/Magnetic volume storage (TiB) (limit 20) CRITICAL: 23.417
   EC2/Running On-Demand EC2 instances (limit 20) CRITICAL: 97
   EC2/Running On-Demand m3.medium instances (limit 20) CRITICAL: 53



Required IAM Policy
++++++++++++++++++++

``awslimitchecker`` can also provide the user with an IAM Policy listing the minimum
permissions for it to perform all limit checks. This can be viewed with the
``--iam-policy`` option:

.. code-block:: console

   (venv)$ awslimitchecker --iam-policy
   {
     "Statement": [
       {
         "Action": [
           "ec2:DescribeInstances", 
   (...)
       }
     ], 
     "Version": "2012-10-17"
   }


